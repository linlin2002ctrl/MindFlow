/// <reference lib="webworker" />
import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';
import { clientsClaim } from 'workbox-core'; // Corrected import for clientsClaim
import { registerRoute, NavigationRoute } from 'workbox-routing';
import { NetworkFirst } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

// This is the placeholder for the precache manifest generated by Workbox.
// It will be replaced by `vite-plugin-pwa` during the build process.
precacheAndRoute(self.__WB_MANIFEST);

// Clean up old caches
cleanupOutdatedCaches();

// Claim clients immediately to ensure the new service worker takes control
clientsClaim();

// Cache navigation requests (e.g., for app shell)
registerRoute(
  new NavigationRoute(
    new NetworkFirst({
      cacheName: 'navigations',
    }),
  ),
);

// Handle push notifications
self.addEventListener('push', (event) => {
  const data = event.data?.json() || {};
  const title = data.title || 'MindFlow Notification';
  const options = {
    body: data.body || 'You have a new message from MindFlow.',
    icon: '/pwa-192x192.png', // Use your app icon
    badge: '/pwa-192x192.png',
    data: {
      url: data.url || '/', // URL to open when notification is clicked
    },
  };

  event.waitUntil(self.registration.showNotification(title, options));
});

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  const urlToOpen = event.notification.data.url;

  event.waitUntil(
    self.clients.openWindow(urlToOpen) // Corrected to self.clients
  );
});

// Handle install event for offline readiness
self.addEventListener('install', (event) => {
  console.log('Service Worker: Installed');
  self.skipWaiting(); // Activate new service worker immediately
});

// Handle activate event
self.addEventListener('activate', (event) => {
  console.log('Service Worker: Activated');
  event.waitUntil(self.clients.claim()); // Corrected to self.clients
});